unit uDaoServicos;

interface

uses
  UServicos,
  UDAO,
  Data.DB;

type
  DaoServicos = class( Dao )
  private
  protected
  public
    constructor CrieObj; override;
    destructor Destrua_se; override;

    function Salvar( PObj: Tobject ): string; override;
    function Excluir( PObj: TObject ): string; override;
    function Pesquisar( PChave: String ): string; override;
    function Carregar( PObj: TObject ): string; override;
    function GetDS: TDataSource; override;
    procedure SetDM( PObj: TObject ); override;
    function VerificaExiste: Boolean;
  end;

implementation

uses
  System.SysUtils;

{ DaoServicos }

function DaoServicos.Carregar( PObj: TObject ): string;
var
  MServico: Servicos;
begin
  MServico := Servicos( PObj );
  MServico.SetCodigo( UmDM.QServicos.FieldByName( 'CODIGO' ).Value );
  MServico.Servico := UmDM.QServicos.FieldByName( 'Servico' ).AsString;
  MServico.Obs     := UmDM.QServicos.FieldByName( 'OBS' ).AsString;
  MServico.SetDataCad( DateTimeToStr( UmDM.QServicos.FieldByName( 'DATACAD' ).AsDateTime ) );
  MServico.SetDataUltAlt( DateTimeToStr( UmDM.QServicos.FieldByName( 'DATAULTALT' ).AsDateTime ) );

end;

constructor DaoServicos.CrieObj;
begin
  inherited;

end;

destructor DaoServicos.Destrua_se;
begin

  inherited;
end;

function DaoServicos.Excluir( PObj: TObject ): string;
var
  MServicos: Servicos;
begin

  MServicos := Servicos( PObj );
  UmDM.Trans.StartTransaction;
  try
    UmDM.QServicos.Edit;
    UmDM.QServicos.Locate( 'CODIGO', MServicos.GetCodigo, [ ] );
    UmDM.QServicos.Delete;
    UmDM.Trans.Commit;
  except
    UmDM.Trans.Rollback;
    Result := 'Erro ao deletar Registro!!';
  end;
end;

function DaoServicos.GetDS: TDataSource;
begin
  Result := UmDM.DsServicos;
end;

function DaoServicos.Pesquisar( PChave: String ): string;
begin
  try
    if not UmDM.QServicos.Active then
      UmDM.QServicos.Active := True;

    if PChave <> '' then
    begin
      if not IsNumero( PChave ) then
        UmDM.QServicos.SQL.Text := 'select * from Servicos where Servico like ' + Chr( 39 ) + '%' + PChave + '%' + Chr( 39 ) + ' Order by Servico'
      else
        UmDM.QServicos.SQL.Text := 'select * from Servicos where codigo = ' + Quotedstr( PChave ) + ' Order by Servico'
    end
    else
      UmDM.QServicos.SQL.Text := 'Select * from Servicos order by Servico';

    UmDM.QServicos.Active := False;
    UmDM.QServicos.Open;
  except
    Result := 'Erro ao Pesquisar!!';
  end;
end;

function DaoServicos.Salvar( PObj: Tobject ): string;
var
  MServico: Servicos;
begin

  MServico := Servicos( PObj );
  UmDM.Trans.StartTransaction;
  try

    if MServico.GetCodigo = 0 then
      UmDM.QServicos.Insert
    else
      UmDM.QServicos.Edit;

    UmDM.QServicos.FieldByName( 'CODIGO' ).AsInteger     := MServico.GetCodigo;
    UmDM.QServicos.FieldByName( 'Servico' ).AsString     := MServico.GetServico;
    UmDM.QServicos.FieldByName( 'DDD' ).AsString         := MServico.GetDDD;
    UmDM.QServicos.FieldByName( 'SIGLA' ).AsString       := MServico.GetSigla;
    UmDM.QServicos.FieldByName( 'COD_ESTADO' ).AsInteger := MServico.GetoEstado.GetCodigo;
    UmDM.QServicos.FieldByName( 'DATACAD' ).AsDateTime   := StrToDateTime( MServico.GetDataCad );

    UmDM.QServicos.Post;
    UmDM.Trans.Commit;
  except
    UmDM.Trans.Rollback;
    Result := 'Erro ao inserir registro!!';
  end;
end;

procedure DaoServicos.SetDM( PObj: TObject );
begin
  inherited;

end;

function DaoServicos.VerificaExiste: Boolean;
begin
  Result := not( UmDM.QServicos.Eof );
end;

end.
